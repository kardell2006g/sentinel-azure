# Common functions that use the tfplan/v2 import

##### Imports #####
import "tfplan/v2" as tfplan
import "strings"
import "types"

##### Functions #####

### find_resources ###
# Find all resources of a specific type using the tfplan/v2 import.
# Only include resources that are being created or updated.
# Technically, this returns a map of resource changes.
find_resources = func(type) {
	resources = filter tfplan.resource_changes as address, rc {
		rc.type is type and
			rc.mode is "managed" and
			(rc.change.actions contains "create" or rc.change.actions contains "update" or
				rc.change.actions contains "read" or
				rc.change.actions contains "no-op")
	}

	return resources
}

### filter_attribute_not_contains_list ###
# Filter a list of resources to those with a specified
# attribute (attr) that does not contain a given list of required values (required).
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# Resources should be derived by applying filters to tfplan.resource_changes.
filter_attribute_not_contains_list = func(resources, attr, required, prtmsg) {
	violators = {}
	messages = {}
	for resources as address, rc {
		# Evaluate the value (v) of the attribute
		v = evaluate_attribute(rc, attr) else null
		# Check if the value contains the desired allowed list
		if v is null or
			not (types.type_of(v) is "list" or types.type_of(v) is "map") {
			# Add the resource and a warning message to the violators list
			message = to_string(address) + " has " + to_string(attr) +
				" that is missing, null, or is not a map or a list"
			violators[address] = rc
			messages[address] = message
			if prtmsg {
				print(message)
			}
		} else {
			missing_values = []
			for required as rv {
				if v not contains rv {
					append(missing_values, rv)
				} // end if
			} // end for required
			if length(missing_values) > 0 {
				# Build warning message when v is a map
				message = to_string(address) + " has " + to_string(attr) + " " +
					to_string(v) +
					" that is missing the required items " +
					to_string(missing_values) +
					" from the list: " +
					to_string(required)
				# Add the resource and warning message to the violators list
				violators[address] = rc
				messages[address] = message
				if prtmsg {
					print(message)
				}
			} // end length(missing_values)
		} // end else v not null
	} // end for
	return {"resources": violators, "messages": messages}
}

# The filter functions all accept a collection of resource changes, an attribute,
# a value or a list of values, and a boolean, prtmsg, which can be true or false
# and indicates whether the filter function should print violation messages.
# The filter functions return a map consisting of 2 items:
#   * "resources": a map consisting of resource changes that violate a condition
#   * "messages":  a map of violation messages associated with the resources
# Note that both the resources and messages collections are indexed by the
# address of the resources, so they will have the same order and length.
# The filter functions all call evaluate_attribute() to evaluate attributes
# of resources even if nested deep within them.

### find_resources_by_provider ###
# Find all resources for a specific provider using the tfplan/v2 import.
# Only include resources that are being created or updated.
# Technically, this returns a map of resource changes.
find_resources_by_provider = func(provider) {
	resources = filter tfplan.resource_changes as address, rc {
		rc.provider_name is provider and
			rc.mode is "managed" and
			(rc.change.actions contains "create" or rc.change.actions contains "update")
	}

	return resources
}

#used in sub functions
### find_datasources ###
# Find all data sources of a specific type using the tfplan/v2 import.
# Only include data sources that are being created, updated, or read.
# Technically, this returns a map of resource changes.
find_datasources = func(type) {
	datasources = filter tfplan.resource_changes as address, rc {
		rc.type is type and
			rc.mode is "data" and
			(rc.change.actions contains "create" or
				rc.change.actions contains "update" or
				rc.change.actions contains "read")
	}

	return datasources
}

### to_string ###
# Convert objects of unknown type to string
# It is used to build messages added to the messages map returned by the
# filter functions
to_string = func(obj) {
	case types.type_of(obj) {
		when "string":
			return obj
		when "int", "float", "bool":
			return string(obj)
		when "null":
			return "null"
		when "undefined":
			return "undefined"
		when "list":
			output = "["
			lastIndex = length(obj) - 1
			for obj as index, value {
				if index < lastIndex {
					output += to_string(value) + ", "
				} else {
					output += to_string(value)
				}
			}
			output += "]"
			return output
		when "map":
			output = "{"
			theKeys = keys(obj)
			lastIndex = length(theKeys) - 1
			for theKeys as index, key {
				if index < lastIndex {
					output += to_string(key) + ": " + to_string(obj[key]) + ", "
				} else {
					output += to_string(key) + ": " + to_string(obj[key]) + "}"
				}
			}
			return output
		else:
			return ""
	}
}

### evaluate_attribute ###
# Evaluates the value of a resource's or block's attribute even if nested.
# The resource should be derived by applying filters to tfplan.resource_changes.
# It can be given in the initial call in the form rc.change.after or just rc
# Indices of lists should be given as 0, 1, 2, and so on.
# For example: boot_disk.0.initialize_params.0.image
evaluate_attribute = func(r, attribute) {

	# Split the attribute into a list, using "." as the separator
	attributes = strings.split(attribute, ".")

	# Convert numeric strings to integers for indices
	if attributes[0] matches "^[0-9]+$" {
		a = int(attributes[0])
		# Make sure r is of type list
		if types.type_of(r) is not "list" {
			return undefined
		}
	} else {
		a = attributes[0]
	}

	# Append the current attribute to the resource instance
	if (types.type_of(r) is "map" and "change" in keys(r)) and
		(types.type_of(r.change) is "map" and "after" in keys(r.change)) {
		new_r = r.change.after[a] else null
	} else {
		new_r = r[a] else null
	}

	# Process based on length of attributes
	# being greater than or equal to 1
	if length(attributes) > 1 {

		# Strip first element from attributes
		attributes = attributes[1:length(attributes)]
		attribute = strings.join(attributes, ".")

		# Make recursive call
		return evaluate_attribute(new_r, attribute)
	} else {

		# We reached the end of the attribute and can stop the
		# recursive calls and return the value of the attribute
		return new_r

	}
}

### print_violations ###
# Prints violations returned by any of the filter functions defined below.
# This would normally only be called if the filter function had been called
# with prtmsg set to false, which is sometimes done when processing resources
# and their blocks.
# If the result of a filter function is assigned to a map like violatingIRs,
# then you should pass violatingIRs["message"] as the first argument.
# The prefix argument is printed before the message of each resource.
print_violations = func(messages, prefix) {
	for messages as address, message {
		print(prefix, message)
	}
	return true
}

### filter_attribute_not_in_list ###
# Filter a list of resources to those with a specified
# attribute (attr) that is not in a given list of allowed values (allowed).
# Resources should be derived by applying filters to tfplan.resource_changes.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to allow null, include "null" in the list (allowed).
filter_attribute_not_in_list = func(resources, attr, allowed, prtmsg) {
	violators = {}
	messages = {}
	for resources as address, rc {
		# Evaluate the value (v) of the attribute
		v = evaluate_attribute(rc, attr) else null
		# Convert null to "null"
		if v is null {
			v = "null"
		}
		# Check if the value is not in the allowed list
		if v not in allowed {
			# Add the resource and a warning message to the violators list
			message = to_string(address) + " has " + to_string(attr) + " with value " +
				to_string(v) +
				" that is not in the allowed list: " +
				to_string(allowed)
			violators[address] = rc
			messages[address] = message
			if prtmsg {
				print(message)
			}
		} // end if
	} // end for
	return {"resources": violators, "messages": messages}
}

### filter_attribute_greater_than_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that is greater than a given numeric value.
# Resources should be derived by applying filters to tfplan.resource_changes.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
filter_attribute_greater_than_value = func(resources, attr, value, prtmsg) {
	violators = {}
	messages = {}
	for resources as address, rc {
		v = evaluate_attribute(rc, attr) else null
		if float(v) else null is null {
			# Add the resource and a warning message to the violators list
			message = to_string(address) + " has " + to_string(attr) +
				" that is null or undefined"
			violators[address] = rc
			messages[address] = message
			if prtmsg {
				print(message)
			}
		} else if float(v) > value {
			# Add the resource and a warning message to the violators list
			message = to_string(address) + " has " + to_string(attr) + " with value " +
				to_string(v) +
				" that is greater than " +
				to_string(value)
			violators[address] = rc
			messages[address] = message
			if prtmsg {
				print(message)
			}
		}
	}
	return {"resources": violators, "messages": messages}
}

### filter_attribute_less_than_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that is less than a given numeric value.
# Resources should be derived by applying filters to tfplan.resource_changes.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
filter_attribute_less_than_value = func(resources, attr, value, prtmsg) {
	violators = {}
	messages = {}
	for resources as address, rc {
		v = evaluate_attribute(rc, attr) else null
		if float(v) else null is null {
			# Add the resource and a warning message to the violators list
			message = to_string(address) + " has " + to_string(attr) +
				" that is null or undefined"
			violators[address] = rc
			messages[address] = message
			if prtmsg {
				print(message)
			}
		} else if float(v) < value {
			# Add the resource and a warning message to the violators list
			message = to_string(address) + " has " + to_string(attr) + " with value " +
				to_string(v) +
				" that is less than " +
				to_string(value)
			violators[address] = rc
			messages[address] = message
			if prtmsg {
				print(message)
			}
		}
	}
	return {"resources": violators, "messages": messages}
}
